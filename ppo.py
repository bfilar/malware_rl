import os
import sys
import random
import gym
from gym import wrappers
import numpy as np
import malware_rl

# Stable Baselines 3
from stable_baselines3 import A2C
from stable_baselines3.common.env_util import make_vec_env

random.seed(0)
module_path = os.path.split(os.path.abspath(sys.modules[__name__].__file__))[0]
outdir = os.path.join(module_path, 'data/logs/random-agent-results')

# Setting up environment
env = gym.make('malconv-train-v0')
env = wrappers.Monitor(env, directory=outdir, force=True)
env.seed(0)

# Setting up training parameters and holding variables
episode_count = 250
done = False
reward = 0
evasions = 0
evasion_history = {}

# Train the agent
agent = A2C("MlpPolicy", env, verbose=1)
agent.learn(total_timesteps=2500)


# Test the agent
for i in range(episode_count):
    ob = env.reset()
    sha256 = env.env.sha256
    while True:
        action, _states = agent.predict(ob, reward, done)
        obs, rewards, done, ep_history = env.step(action)
        if done and rewards >= 10.0:
            evasions += 1
            evasion_history[sha256] = ep_history
            break

        elif done:
            break

# Output metrics/evaluation stuff
evasion_rate = (evasions/episode_count) * 100
mean_action_count = np.mean(env.get_episode_lengths())
print(f"{evasion_rate}% samples evaded model.")
print(f"Average of {mean_action_count} moves to evade model.")
